{
  "info": {
    "_postman_id": "bobs-garage-fullstack-collection",
    "name": "Bob's Garage API (Full Stack)",
    "description": "Postman collection to test the Bob's Garage REST API (Node.js + Express + Sequelize + TS). Includes auth, CRUD for services & staff, user profile, admin protected routes, health check, and 404 tests. Updated tests and variables for improved coverage.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "chatgpt",
    "_updated": "2025-08-19T00:00:00"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{baseUrl}}/auth/register", "host": ["{{baseUrl}}"], "path": ["auth", "register"] },
            "body": { "mode": "raw", "raw": "{\n  \"email\": \"sofia+{{randomInt}}@example.com\",\n  \"password\": \"ChangeMe!123\"\n}" },
            "description": "Creates a new user account."
          },
          "event": [
            { "listen": "prerequest", "script": { "type": "text/javascript", "exec": [
              "// ensure randomInt",
              "if (!pm.environment.get('randomInt')) { pm.environment.set('randomInt', Math.floor(Math.random()*100000)); }"
            ] } },
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('Status 201 Created (or 200)', function () { pm.expect([200,201]).to.include(pm.response.code); });",
              "const data = pm.response.json();",
              "pm.test('Response has id & email', function(){ pm.expect(data).to.have.property('id'); pm.expect(data).to.have.property('email'); });"
            ] } }
          ]
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{baseUrl}}/auth/login", "host": ["{{baseUrl}}"], "path": ["auth","login"] },
            "body": { "mode": "raw", "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}" },
            "description": "Logs in and returns an access token (and sets refresh cookie)."
          },
          "event": [
            { "listen": "test", "script": { "type": "text/javascript", "exec": [
              "pm.test('Status 200 OK', function () { pm.response.to.have.status(200); });",
              "const data = pm.response.json();",
              "pm.test('Contains access token', function(){ pm.expect(data).to.have.property('access'); });",
              "// Save tokens for subsequent requests",
              "pm.environment.set('access', data.access);",
              "pm.environment.set('token', data.access);"
            ] } }
          ]
        },
        {
          "name": "Login (Invalid Credentials)",
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{baseUrl}}/auth/login", "host": ["{{baseUrl}}"], "path": ["auth","login"] },
            "body": { "mode": "raw", "raw": "{\n  \"email\": \"not-a-user@example.com\",\n  \"password\": \"wrong\"\n}" }
          },
          "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [
            "pm.test('401 on invalid credentials', function(){ pm.response.to.have.status(401); });"
          ] } } ]
        },
        {
          "name": "Refresh Access Token",
          "request": { "method": "POST", "url": { "raw": "{{baseUrl}}/auth/refresh", "host": ["{{baseUrl}}"], "path": ["auth","refresh"] } },
          "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [
            "// Depending on cookie being present or not, expect 200 or 401",
            "pm.test('200 OK or 401 when no cookie', function(){ pm.expect([200,401]).to.include(pm.response.code); });",
            "if (pm.response.code === 200) { pm.environment.set('access', pm.response.json().access); pm.environment.set('token', pm.response.json().access); }"
          ] } } ]
        }
      ]
    },
    {
      "name": "Services",
      "item": [
        {
          "name": "Create Service (ADMIN/Protected)",
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "Bearer {{access}}" } ],
            "url": { "raw": "{{baseUrl}}/services", "host": ["{{baseUrl}}"], "path": ["services"] },
            "body": { "mode": "raw", "raw": "{\n  \"name\": \"Full Service\",\n  \"price\": 249.0,\n  \"description\": \"Full vehicle service incl. safety checks\",\n  \"imageUrl\": \"https://picsum.photos/seed/service/640/360\",\n  \"published\": true\n}" }
          },
          "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [
            "pm.test('Created 201/200', function () { pm.expect([200,201]).to.include(pm.response.code); });",
            "const data = pm.response.json();",
            "pm.environment.set('serviceId', data.id || data.service?.id);"
          ] } } ]
        },
        {
          "name": "Create Service (400 on invalid)",
          "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "Bearer {{access}}" } ], "url": { "raw": "{{baseUrl}}/services", "host": ["{{baseUrl}}"], "path": ["services"] }, "body": { "mode": "raw", "raw": "{\n  \"name\": \"x\",\n  \"price\": -1,\n  \"description\": \"y\"\n}" } },
          "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('400 on invalid schema', function(){ pm.response.to.have.status(400); });" ] } } ]
        },
        { "name": "List Services", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/services?limit=10", "host": ["{{baseUrl}}"], "path": ["services"], "query": [ {"key": "limit", "value": "10"} ] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('200 and array', function(){ pm.response.to.have.status(200); const data = pm.response.json(); pm.expect(data).to.be.an('array'); });" ] } } ] },
        { "name": "Get Service by ID", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/services/{{serviceId}}", "host": ["{{baseUrl}}"], "path": ["services","{{serviceId}}"] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('200 OK', function(){ pm.response.to.have.status(200); });", "pm.test('Has id', function(){ pm.expect(pm.response.json()).to.have.property('id'); });" ] } } ] },
        { "name": "Get Service 404", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/services/9999999", "host": ["{{baseUrl}}"], "path": ["services","9999999"] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('404 Not Found', ()=> pm.response.to.have.status(404));" ] } } ] },
        { "name": "Update Service (Protected)", "request": { "method": "PUT", "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "Bearer {{access}}" } ], "url": { "raw": "{{baseUrl}}/services/{{serviceId}}", "host": ["{{baseUrl}}"], "path": ["services","{{serviceId}}"] }, "body": { "mode": "raw", "raw": "{\n  \"price\": 199.0,\n  \"published\": true\n}" } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('200 OK', function(){ pm.response.to.have.status(200); });" ] } } ] },
        { "name": "Delete Service (Protected)", "request": { "method": "DELETE", "header": [ { "key": "Authorization", "value": "Bearer {{access}}" } ], "url": { "raw": "{{baseUrl}}/services/{{serviceId}}", "host": ["{{baseUrl}}"], "path": ["services","{{serviceId}}"] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('204/200 on delete', function(){ pm.expect([200,204]).to.include(pm.response.code); });" ] } } ] },
        { "name": "Create Service (401 when no token)", "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" } ], "url": { "raw": "{{baseUrl}}/services", "host": ["{{baseUrl}}"], "path": ["services"] }, "body": { "mode": "raw", "raw": "{\n  \"name\": \"x\",\n  \"price\": 10,\n  \"description\": \"y\"\n}" } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('401/403 without auth', function(){ pm.expect([401,403]).to.include(pm.response.code); });" ] } } ] }
      ]
    },
    {
      "name": "Staff",
      "item": [
        { "name": "Create Staff (Protected)", "request": { "method": "POST", "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "Bearer {{access}}" } ], "url": { "raw": "{{baseUrl}}/staff", "host": ["{{baseUrl}}"], "path": ["staff"] }, "body": { "mode": "raw", "raw": "{\n  \"name\": \"Bob\",\n  \"role\": \"Owner/Mechanic\",\n  \"bio\": \"Veteran mechanic with 20+ years experience.\",\n  \"photoUrl\": \"https://picsum.photos/seed/bob/256/256\"\n}" } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('Created', function(){ pm.expect([200,201]).to.include(pm.response.code); });", "const data = pm.response.json(); pm.environment.set('staffId', data.id || data.staff?.id);" ] } } ] },
        { "name": "List Staff", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/staff", "host": ["{{baseUrl}}"], "path": ["staff"] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('OK', ()=> pm.response.to.have.status(200));" ] } } ] },
        { "name": "Get Staff 404", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/staff/9999999", "host": ["{{baseUrl}}"], "path": ["staff","9999999"] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('404 Not Found', ()=> pm.response.to.have.status(404));" ] } } ] },
        { "name": "Update Staff (Protected)", "request": { "method": "PUT", "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "Bearer {{access}}" } ], "url": { "raw": "{{baseUrl}}/staff/{{staffId}}", "host": ["{{baseUrl}}"], "path": ["staff","{{staffId}}"] }, "body": { "mode": "raw", "raw": "{\n  \"role\": \"Head Mechanic\"\n}" } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('OK', ()=> pm.response.to.have.status(200));" ] } } ] },
        { "name": "Delete Staff (Protected)", "request": { "method": "DELETE", "header": [ { "key": "Authorization", "value": "Bearer {{access}}" } ], "url": { "raw": "{{baseUrl}}/staff/{{staffId}}", "host": ["{{baseUrl}}"], "path": ["staff","{{staffId}}"] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('Deleted', ()=> pm.expect([200,204]).to.include(pm.response.code));" ] } } ] }
      ]
    },
    {
      "name": "Users",
      "item": [
        { "name": "Get My Profile (Protected)", "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "Bearer {{access}}" } ], "url": { "raw": "{{baseUrl}}/users/me", "host": ["{{baseUrl}}"], "path": ["users","me"] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('OK or 401', ()=> pm.expect([200,401]).to.include(pm.response.code));", "if (pm.response.code === 200) pm.test('Has email', ()=> pm.expect(pm.response.json()).to.have.property('email'));" ] } } ] },
        { "name": "Update My Profile (Protected)", "request": { "method": "PUT", "header": [ { "key": "Content-Type", "value": "application/json" }, { "key": "Authorization", "value": "Bearer {{access}}" } ], "url": { "raw": "{{baseUrl}}/users/me", "host": ["{{baseUrl}}"], "path": ["users","me"] }, "body": { "mode": "raw", "raw": "{\n  \"active\": true\n}" } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('OK or 401', ()=> pm.expect([200,401]).to.include(pm.response.code));" ] } } ] }
      ]
    },
    {
      "name": "Admin",
      "item": [
        { "name": "Admin Metrics (Protected + Admin role)", "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "Bearer {{access}}" } ], "url": { "raw": "{{baseUrl}}/admin/metrics", "host": ["{{baseUrl}}"], "path": ["admin","metrics"] }, "description": "Requires admin role." }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('200 OK or 403 Forbidden', function(){ pm.expect([200,403]).to.include(pm.response.code); });" ] } } ] },
        { "name": "List Users (Admin)", "request": { "method": "GET", "header": [ { "key": "Authorization", "value": "Bearer {{access}}" } ], "url": { "raw": "{{baseUrl}}/admin/users", "host": ["{{baseUrl}}"], "path": ["admin","users"] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('200 or 403', ()=> pm.expect([200,403]).to.include(pm.response.code));" ] } } ] }
      ]
    },
    {
      "name": "Health & Misc",
      "item": [
        { "name": "Health (API prefix)", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/health", "host": ["{{baseUrl}}"], "path": ["health"] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('OK', ()=> pm.response.to.have.status(200));" ] } } ] },
        { "name": "Health (root)", "request": { "method": "GET", "url": { "raw": "{{baseHost}}/health", "host": ["{{baseHost}}"], "path": ["health"] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('OK', ()=> pm.response.to.have.status(200));" ] } } ] },
        { "name": "DB Status", "request": { "method": "GET", "url": { "raw": "{{baseHost}}/db-status", "host": ["{{baseHost}}"], "path": ["db-status"] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('200 or 500 depending on DB', function(){ pm.expect([200,500]).to.include(pm.response.code); });" ] } } ] },
        { "name": "404 Test (Undefined API Route)", "request": { "method": "GET", "url": { "raw": "{{baseUrl}}/definitely-not-a-route", "host": ["{{baseUrl}}"], "path": ["definitely-not-a-route"] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('Returns 404', ()=> pm.response.to.have.status(404));" ] } } ] },
        { "name": "404 Test (Root)", "request": { "method": "GET", "url": { "raw": "{{baseHost}}/nope", "host": ["{{baseHost}}"], "path": ["nope"] } }, "event": [ { "listen": "test", "script": { "type": "text/javascript", "exec": [ "pm.test('Returns 404', ()=> pm.response.to.have.status(404));" ] } } ] }
      ]
    }
  ],
  "auth": { "type": "noauth" },
  "event": [
    { "listen": "prerequest", "script": { "type": "text/javascript", "exec": [
      "// Ensure baseUrl consistency if baseHost is set",
      "if (pm.environment.get('baseHost') && !pm.environment.get('baseUrl')) { pm.environment.set('baseUrl', pm.environment.get('baseHost') + '/api'); }"
    ] } },
    { "listen": "test", "script": { "type": "text/javascript", "exec": [ "// Collection-level tests (optional)" ] } }
  ],
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:3000/api" },
    { "key": "baseHost", "value": "http://localhost:3000" },
    { "key": "loginEmail", "value": "admin@example.com" },
    { "key": "loginPassword", "value": "ChangeMe!123" },
    { "key": "randomInt", "value": "" }
  ]
}
