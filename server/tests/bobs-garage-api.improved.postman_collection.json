{
  "info": {
    "_postman_id": "bobs-garage-fullstack-collection-improved-587801",
    "name": "Bob's Garage API \u2014 Improved Tests",
    "description": "Autogenerated from integration tests, with added negative cases, rate limit runner, and schema checks. Run the Auth/Login (Admin) first for protected routes.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "chatgpt",
    "_updated": "2025-08-19T07:16:41"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Ensure baseUrl consistency if baseHost is set",
          "if (pm.environment.get('baseHost') && !pm.environment.get('baseUrl')) {",
          "  pm.environment.set('baseUrl', pm.environment.get('baseHost') + '/api');",
          "}",
          "if (!pm.environment.get('userEmail')) {",
          "  pm.environment.set('userEmail', `sofia+${pm.variables.replaceIn('{{randomInt}}') || Math.floor(Math.random()*1e9)}@example.com`);",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Collection-level test hook (unused)"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4000/api"
    },
    {
      "key": "baseHost",
      "value": "http://localhost:4000"
    }
  ],
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register (new user)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200, 201]', function () { pm.expect([200, 201]).to.include(pm.response.code); });",
                  "const data = pm.response.json();",
                  "pm.test('Response has id & email', function(){ pm.expect(data).to.have.property('id'); pm.expect(data).to.have.property('email'); });",
                  "pm.environment.set('userId', data.id || data.user?.id || '');"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// ensure randomized userEmail remains dynamic if left default",
                  "pm.environment.set('userEmail', pm.variables.replaceIn('{{userEmail}}'));"
                ]
              }
            }
          ]
        },
        {
          "name": "Register (duplicate -> 409/400)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [400, 409]', function () { pm.expect([400, 409]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Login (Admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "description": "Logs in as admin and saves {{access}} for protected routes.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', function () { pm.response.to.have.status(200); });",
                  "const data = pm.response.json();",
                  "pm.test('Contains access token', function(){ pm.expect(data).to.have.property('access'); });",
                  "pm.environment.set('access', data.access);"
                ]
              }
            }
          ]
        },
        {
          "name": "Login (User)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK', function () { pm.response.to.have.status(200); });",
                  "const data = pm.response.json(); pm.environment.set('userAccess', data.access || '');"
                ]
              }
            }
          ]
        },
        {
          "name": "Login (Invalid creds -> 401)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"not-a-user@example.com\",\n  \"password\": \"wrong\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [401]', function () { pm.expect([401]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh Access Token",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "refresh"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 OK or 401 when no cookie', function(){ pm.expect([200,401]).to.include(pm.response.code); });",
                  "if (pm.response.code === 200) { const data = pm.response.json(); pm.environment.set('access', data.access); }"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Tokens \u2014 Negative",
      "item": [
        {
          "name": "Get Profile (no token -> 401)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [401]', function () { pm.expect([401]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Profile (malformed token -> 401)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer not.a.jwt"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [401]', function () { pm.expect([401]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Profile (tampered signature -> 401)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer header.payload.badSignature"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [401]', function () { pm.expect([401]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Services",
      "item": [
        {
          "name": "Create Service (ADMIN/Protected)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/services",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "services"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Full Service\",\n  \"price\": 249.0,\n  \"description\": \"Full vehicle service incl. safety checks\",\n  \"imageUrl\": \"https://picsum.photos/seed/service/640/360\",\n  \"published\": true\n}"
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200, 201]', function () { pm.expect([200, 201]).to.include(pm.response.code); });",
                  "const data = pm.response.json(); pm.environment.set('serviceId', data.id || data.service?.id || '');"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Service (400 invalid body)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/services",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "services"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"x\",\n  \"price\": -1,\n  \"description\": \"y\"\n}"
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [400]', function () { pm.expect([400]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "List Services",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/services?limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "services?limit=10"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('200 and array', function(){ pm.response.to.have.status(200); const data = pm.response.json(); pm.expect(data).to.be.an('array'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Service by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/services/{{serviceId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "services",
                "{{serviceId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200]', function () { pm.expect([200]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Service 404",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/services/9999999",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "services",
                "9999999"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [404]', function () { pm.expect([404]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Service invalid id param -> 400",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/services/abc",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "services",
                "abc"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [400]', function () { pm.expect([400]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Service (Protected)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/services/{{serviceId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "services",
                "{{serviceId}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"price\": 199.0,\n  \"published\": true\n}"
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200]', function () { pm.expect([200]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Service (Protected)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/services/{{serviceId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "services",
                "{{serviceId}}"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200, 204]', function () { pm.expect([200, 204]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Service (401 when no token)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/services",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "services"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"x\",\n  \"price\": 10,\n  \"description\": \"y\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [401, 403]', function () { pm.expect([401, 403]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        }
      ],
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{access}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Staff",
      "item": [
        {
          "name": "Create Staff (Protected)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/staff",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "staff"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Bob\",\n  \"role\": \"Owner/Mechanic\",\n  \"bio\": \"Veteran mechanic with 20+ years experience.\",\n  \"photoUrl\": \"https://picsum.photos/seed/bob/256/256\"\n}"
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200, 201]', function () { pm.expect([200, 201]).to.include(pm.response.code); });",
                  "const data = pm.response.json(); pm.environment.set('staffId', data.id || data.staff?.id || '');"
                ]
              }
            }
          ]
        },
        {
          "name": "List Staff",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/staff",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "staff"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200]', function () { pm.expect([200]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Staff 404",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/staff/9999999",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "staff",
                "9999999"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [404]', function () { pm.expect([404]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Staff invalid id -> 400",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/staff/abc",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "staff",
                "abc"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [400]', function () { pm.expect([400]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Staff (Protected)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/staff/{{staffId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "staff",
                "{{staffId}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"Head Mechanic\"\n}"
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200]', function () { pm.expect([200]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Staff (Protected)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/staff/{{staffId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "staff",
                "{{staffId}}"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200, 204]', function () { pm.expect([200, 204]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        }
      ],
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{access}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get My Profile (Protected)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('OK or 401', ()=> pm.expect([200,401]).to.include(pm.response.code));",
                  "if (pm.response.code === 200) pm.test('Has email', ()=> pm.expect(pm.response.json()).to.have.property('email'));"
                ]
              }
            }
          ]
        },
        {
          "name": "Update My Profile (Protected)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"active\": true\n}"
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200, 401]', function () { pm.expect([200, 401]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        }
      ],
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{access}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Admin",
      "item": [
        {
          "name": "Admin Metrics (Protected + Admin role)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/metrics",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "metrics"
              ]
            },
            "description": "Requires admin role.",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200, 403]', function () { pm.expect([200, 403]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "List Users (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200, 403]', function () { pm.expect([200, 403]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User by ID (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users",
                "{{userId}}"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200, 404]', function () { pm.expect([200, 404]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User (Admin)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users",
                "{{userId}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"active\": true\n}"
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200, 400, 404]', function () { pm.expect([200, 400, 404]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete User (Admin)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users",
                "{{userId}}"
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200, 204, 404]', function () { pm.expect([200, 204, 404]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        }
      ],
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{access}}",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "Health & Misc",
      "item": [
        {
          "name": "Health (API prefix)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200]', function () { pm.expect([200]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Health (root)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseHost}}/health",
              "host": [
                "{{baseHost}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200]', function () { pm.expect([200]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DB Status",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseHost}}/db-status",
              "host": [
                "{{baseHost}}"
              ],
              "path": [
                "db-status"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [200, 500]', function () { pm.expect([200, 500]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "404 Test (Undefined API Route)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/definitely-not-a-route",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "definitely-not-a-route"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [404]', function () { pm.expect([404]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "404 Test (Root)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseHost}}/nope",
              "host": [
                "{{baseHost}}"
              ],
              "path": [
                "nope"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [404]', function () { pm.expect([404]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Rate Limit (Burst /health)",
      "item": [
        {
          "name": "Burst call /health until threshold",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "let n = parseInt(pm.environment.get('rateBurstCount') || '0', 10);",
                  "n += 1;",
                  "pm.environment.set('rateBurstCount', String(n));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const max = 120; // adjust to your limiter settings",
                  "const n = parseInt(pm.environment.get('rateBurstCount') || '1', 10);",
                  "if (n < max) {",
                  "  pm.test('Expecting mostly 200 before limit', function(){ pm.expect([200,429]).to.include(pm.response.code); });",
                  "  postman.setNextRequest('Burst call /health until threshold');",
                  "} else {",
                  "  pm.test('Last response is 200 or 429', function(){ pm.expect([200,429]).to.include(pm.response.code); });",
                  "  pm.environment.set('rateBurstCount', '0');",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Validation \u2014 Edge Cases",
      "item": [
        {
          "name": "Service name too short -> 400",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/services",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "services"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"x\",\n  \"price\": 100,\n  \"description\": \"ok\"\n}"
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [400]', function () { pm.expect([400]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Service price negative -> 400",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/services",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "services"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Engine Overhaul\",\n  \"price\": -5,\n  \"description\": \"no\"\n}"
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [400]', function () { pm.expect([400]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "Staff invalid payload (missing role) -> 400",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/staff",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "staff"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Alice\"\n}"
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [400]', function () { pm.expect([400]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "XSS attempt in service description -> 400/422",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/services",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "services"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Detailing\",\n  \"price\": 99,\n  \"description\": \"<script>alert(1)</script>\"\n}"
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{access}}",
                  "type": "string"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('HTTP is one of: [400, 422]', function () { pm.expect([400, 422]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        }
      ],
      "auth": {
        "type": "bearer",
        "bearer": [
          {
            "key": "token",
            "value": "{{access}}",
            "type": "string"
          }
        ]
      }
    }
  ]
}